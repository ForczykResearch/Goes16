function  DisplayCompositeAerosolMask(titlestr)
% Display the a composite aerosol mask. This composite
% statistic will be generated by summing the aerosol/smoke/dusk mask values
% which can then have a maximum value of 3 in any one pixel
% Project this data on a equiconic section map
% This uses the CONUS projection
% Note this routine is basically the same as DisplayCloudTopHeightsRev2.,
% Written By: Stephen Forczyk
% Created: Feb 9,2021
% Revised: 
% Classification: Unclassified

global MetaDataS;
global AerosolS SmokeS DustS;
global DQFS tS yS xS tBS goesImagerS yImgS yImgBS;
global xImgS xImgBS SatDataS GeoSpatialS ;
global AlgoS GoesWaveBand;
global TPWRS TRVS TotPixRS RROutPixCountS RainRateS;
global AlgoProdVersionContainerS ProcessParamS;
global QLZAS  QLZABS;
global SZAS SZABS;
global RLZAS RLZABS RSZAS QSZAS RSZABS QSZABS;
global NumGoodSZAPixelS NumGoodLZAPixelS NumRetrievalS;
global GRBErrorsS L0ErrorsS;
global MaskCorrelation;
global aerofrac smokefrac dustfrac compfrac;
global westEdge eastEdge northEdge southEdge;
global GOESFileName;
global RasterLats RasterLons;
global idebug isavefiles;
global DQFHdr DQFTable;
global MonthDayStr MonthDayYearStr;
global DayMonthNonLeapYear DayMonthLeapYear CalendarFileName;
global RptGenPresent iCreatePDFReport pdffilename rpt chapter;
global JpegCounter JpegFileList;
global ImageProcessPresent;

global widd2 lend2;
global initialtimestr igrid ijpeg ilog imovie;
global vert1 hor1 widd lend;
global vert2 hor2 machine;
global chart_time;
global Fz1 Fz2;
global idirector mov izoom iwindow;
global matpath GOES16path;
global jpegpath fid;
global smhrpath excelpath ascpath;
global ipowerpoint PowerPointFile scaling stretching padding;
global ichartnum;
% additional paths needed for mapping
global matpath1 mappath;
global canadapath stateshapepath topopath;
global trajpath militarypath;
global figpath screencapturepath gridpath;
global shapepath2 countrypath countryshapepath usstateboundariespath;
global GOES16Band1path GOES16Band2path GOES16Band3path GOES16Band4path;
global GOES16Band5path GOES16Band6path GOES16Band7path GOES16Band8path
global GOES16Band9path GOES16Band10path GOES16Band11path GOES16Band12path;
global GOES16Band13path GOES16Band14path GOES16Band15path GOES16Band16path;
global GOES16CloudTopHeightpath GOES16BandPaths;
if((iCreatePDFReport==1) && (RptGenPresent==1))
    import mlreportgen.dom.*;
    import mlreportgen.report.*;
end
fprintf(fid,'\n');
fprintf(fid,'%s\n','-----Start plot routine DisplayCompositeMask-----');
eval(['cd ' gridpath(1:length(gridpath)-1)]);
ab=1;
% Get the Create a Composite Mask from the sum of the Aerosol/Smoke and
% Dust masks
Aerosol=AerosolS.values;
Smoke=SmokeS.values;
Dust=DustS.values;
[nrows1,ncols1]=size(Aerosol);
[nrows2,ncols2]=size(Smoke);
[nrows3,ncols3]=size(Dust);
arraystr1=strcat('Aerosol rows=',num2str(nrows1),'-cols=',num2str(ncols1));
arraystr2=strcat('Smoke rows=',num2str(nrows2),'-cols=',num2str(ncols2));
arraystr3=strcat('Dust rows=',num2str(nrows3),'-cols=',num2str(ncols3));
% add the results together only if all three arrays are the same size
igo=1;
if((nrows1~=nrows2) || (nrows1~=nrows3) || (nrows2~=nrows3))
    igo=0;
end
if((ncols1~=ncols2) || (ncols1~=ncols3) || (ncols2~=ncols3))
    igo=0;
end
if(igo==1)
    Composite=Aerosol+Smoke+Dust;
    [icomp]=find(Composite>0);
    numcomp=length(icomp);
    [nrows,ncols]=size(Composite);
    ntotpixels=nrows*ncols;
    compfrac=numcomp/ntotpixels;
% Calculate the 2D correlation type statistic using my own variant
% The out of the box solutions will nix the output for any row or column
% that contains a NaN value. My version will just skip those row,column
% entries not the entire row or column
% 
      MaskCorrelation=zeros(3,3);
      mc11=1;
      mc22=1;
      mc33=1;
      mc12=0;
      mc13=0;
      mc21=0;
      mc23=0;
      mc31=0;
      mc32=0;
% compute mc12
      ihit12=0;
      sum12=0;
      ntot=nrows*ncols;
      for jj=1:nrows
          for kk=1:ncols
              avalue=Aerosol(jj,kk);
              svalue=Smoke(jj,kk);
              a1=isnan(avalue);
              a2=isnan(svalue);
              if((a1==0) && (a2==0))
                  sum12=sum12+avalue*svalue;
                  ihit12=ihit12+1;
              end
          end
      end
      mc12=sum12/ntot;
      mc21=mc12;
% compute mc 13
      ihit13=0;
      sum13=0;
      for jj=1:nrows
          for kk=1:ncols
              avalue=Aerosol(jj,kk);
              dvalue=Dust(jj,kk);
              a1=isnan(avalue);
              a2=isnan(dvalue);
              if((a1==0) && (a2==0))
                  sum13=sum13+avalue*dvalue;
                  ihit13=ihit13+1;
              end
          end
      end
      mc13=sum13/ntot;
      mc31=mc13;
% compute mc23
      ihit23=0;
      sum23=0;
      for jj=1:nrows
          for kk=1:ncols
              svalue=Smoke(jj,kk);
              dvalue=Dust(jj,kk);
              a1=isnan(svalue);
              a2=isnan(dvalue);
              if((a1==0) && (a2==0))
                  sum23=sum23+svalue*dvalue;
                  ihit23=ihit23+1;
              end
          end
      end
      mc23=sum23/ntot;
      mc32=mc23;
% Set up the Correlation Matrix
    MaskCorrelation=[mc11 mc12 mc13;mc21 mc22 mc23;mc31 mc32 mc33];
    ab=1;
    if((nrows==1500) && (ncols==2500))
        GridMatFileName='ConusAerosolMaskLatLonGrid.mat';
    else
        disp('This does not work'); 
    end
    gridstr1=strcat('Loaded Map Grid From File=',GridMatFileName);
    fprintf(fid,'%s\n',gridstr1);
    load(GridMatFileName,'RasterLats','RasterLons');
    dispstr=strcat('Loaded Grid Raster File-',GridMatFileName);
    disp(dispstr)
    duststr1=strcat('Fraction of pixels with either aerosol/smoke or dust detected=',num2str(compfrac,6));
    fprintf(fid,'%s\n',duststr1);
    compmin=min(min(Composite));
    compmax=max(max(Composite));
    compstr2=strcat('Composite mask min value=',num2str(compmin,3),'-mask max value=',num2str(compmax,3));
    fprintf(fid,'%s\n',compstr2);
% Fetch the map limits
    westEdge=double(GeoSpatialS.geospatial_westbound_longitude);
    eastEdge=double(GeoSpatialS.geospatial_eastbound_longitude);
    southEdge=double(GeoSpatialS.geospatial_southbound_latitude);
    northEdge=double(GeoSpatialS.geospatial_northbound_latitude);
% Get the scan start date and time data based on the file name
    [YearS,DayS,HourS,MinuteS,SecondS] = GetGOESDateTimeString(GOESFileName,1);
% Get the scan end date and time data based on the file name
    [YearE,DayE,HourE,MinuteE,SecondE] = GetGOESDateTimeString(GOESFileName,2);
    result = is_leap_year(YearS);
    if(result==0)
        MonthDayStr=char(DayMonthNonLeapYear{DayS,1});
    else
        MonthDayStr=char(DayMonthLeapYear{DayS,1});
    end
    MonthDayYearStr=strcat(MonthDayStr,'-',num2str(YearS));
    axesm ('pcarree','Frame','on','Grid','on','MapLatLimit',[southEdge northEdge],...
        'MapLonLimit',[westEdge eastEdge],'meridianlabel','on','parallellabel','on','plabellocation',5,'mlabellocation',10,...
        'MLabelParallel','south');
    set(gcf,'MenuBar','none');
    cmapland=colormap('jet');
    geoshow(RasterLats,RasterLons,Composite','DisplayType','texturemap');
    demcmap(Composite',256,[],cmapland);
    hold on
    eval(['cd ' mappath(1:length(mappath)-1)]);
    load('USAHiResBoundaries.mat','USALat','USALon');
    plotm(USALat,USALon,'y');
    load('CanadaBoundaries.mat','CanadaLat','CanadaLon');
    plotm(CanadaLat,CanadaLon,'y');
    load('MexicoBoundaries.mat','MexicoLat','MexicoLon');
    plotm(MexicoLat,MexicoLon,'y');
    load('CubaBoundaries.mat','CubaLat','CubaLon');
    plotm(CubaLat,CubaLon,'y');
    load('DominicanRepublicBoundaries.mat','DRLat','DRLon');
    plotm(DRLat,DRLon,'y');
    load('HaitiBoundaries.mat','HaitiLat','HaitiLon');
    plotm(HaitiLat,HaitiLon,'y');
    load('BelizeBoundaries.mat','BelizeLat','BelizeLon');
    plotm(BelizeLat,BelizeLon,'y');
    load('GautemalaBoundaries.mat','GautemalaLat','GautemalaLon');
    plotm(GautemalaLat,GautemalaLon,'y')
    load('JamaicaBoundaries.mat','JamaicaLat','JamaicaLon');
    plotm(JamaicaLat,JamaicaLon,'y')
    set(gcf,'Position',[hor1 vert1 widd lend])
    title(titlestr)
    hold off
    colorbar;
    newaxesh=axes('Position',[0 0 1 1]);
    set(newaxesh,'XLim',[0 1],'YLim',[0 1]);
    tx1=.13;
    ty1=.28;
    txtstr1=strcat('Start Scan-Y',num2str(YearS),'-D-',num2str(DayS),'-H-',...
    num2str(HourS),'-M-',num2str(MinuteS),'-S-',num2str(SecondS),'-----',MonthDayYearStr);
    txt1=text(tx1,ty1,txtstr1,'FontWeight','bold','FontSize',12);
    tx2=.84;
    ty2=.77;
    txt2=text(tx2,ty2,'Composite Mask','FontWeight','bold','FontSize',12);
    tx3=.13;
    ty3=.24;
    txtstr3=strcat('fraction comp pixels=',num2str(compfrac,6));
    txt3=text(tx3,ty3,txtstr3,'FontWeight','bold','FontSize',12);
    set(newaxesh,'Visible','Off');
% Save this chart
    figstr=strcat(titlestr,'.jpg');
    eval(['cd ' jpegpath(1:length(jpegpath)-1)]);
    actionstr='print';
    typestr='-djpeg';
    [cmdString]=MyStrcat2(actionstr,typestr,figstr);
    eval(cmdString);
    pause(chart_time);
    if((iCreatePDFReport==1) && (RptGenPresent==1))
        [ibreak]=strfind(GOESFileName,'_e');
        is=1;
        ie=ibreak(1)-1;
        GOESShortFileName=GOESFileName(is:ie);
        add(chapter,Section('Composite Mask'));
        imdata = imread(figstr);
        [nhigh,nwid,ndepth]=size(imdata);
        image = mlreportgen.report.FormalImage();
        image.Image = which(figstr);
        pdftxtstr=strcat('Composite Mask For File-',GOESShortFileName);
        pdftext = Text(pdftxtstr);
        pdftext.Color = 'red';
        image.Caption = pdftext;
        nhighs=floor(nhigh/2.4);
        nwids=floor(nwid/2.4);
        heightstr=strcat(num2str(nhighs),'px');
        widthstr=strcat(num2str(nwids),'px');
        image.Height = heightstr;
        image.Width = widthstr;
        image.ScaleToFit=0;
        add(chapter,image);
% Now add some text 
        parastr1=strcat('Data used for this chart was taken from file-',GOESShortFileName,'.');
        parastr2=strcat('The idea behind this mask is to numerically sum the 3 masks-if a pixel has a value of 3 then all 3 masks are on switched on for the same pixel.');
        parastr3='One way to look at this is to examine what fraction of pixels are turned on for each of the mask types.';
        parastr4='The list below shows this fraction for each of the mask types.';
%         parastr3='This mask is binary so a 0 corresponds to no dust contamination present in the pixel to a 1 that signifies dust detection in that pixel.';
%         parastr4='Detection of Aerosol/Smoke or Dust is not an easy measurement and a fact of a zero mask value should be interpreted to mean that the detection threshold was not met.';
%         parastr5='The compuatational algorithm to detect the Dust works best when there are heavy concentrations of Dust over dark pixels and worst for lower concentrations on lighter pixels.';
%         parastr6=strcat('In the data sample shown above the fraction of pixels with dust detected above threshold was-',num2str(dustfrac,6));
        parastr9=strcat(parastr1,arraystr1,'-',arraystr2,'-',arraystr3,'.',parastr2,parastr3,parastr4);
        p1 = Paragraph(parastr9);
        p1.Style = {OuterMargin("0pt", "0pt","0pt","10pt")};
        add(chapter,p1);
        Lists=cell(4,1);
        liststr1=strcat('Aerosol Mask Detection Fraction=',num2str(aerofrac,6));
        liststr2=strcat('Smoke Mask Detection Fraction=',num2str(smokefrac,6));
        liststr3=strcat('Dust Mask Detection Fraction=',num2str(dustfrac,6));
        liststr4=strcat('Composite Mask Detection Fraction=',num2str(dustfrac,6));
        Lists{1,1}=liststr1;
        Lists{2,1}=liststr2;
        Lists{3,1}=liststr3;
        Lists{4,1}=liststr4;
        ul = UnorderedList(Lists);
        add(chapter,ul);
        if((aerofrac>.01) && (smokefrac>.01) && (dustfrac<.01))
            aerosmoke=aerofrac/smokefrac;
            if(aerosmoke>.5)
                parastr11='In this frame the aerosol and smoke masks shows considerable correlation but there is no correlation with the dust mask.';
            else
                parastr11='The aerosol and smoke masks shows lesser correlation but there is no correlation with the dust mask.';
            end
        elseif((aerofrac<=.01) && (smokefrac<.01) && (dustfrac<.01))
            parastr11='The aerosol and smoke masks are mostly clear and show no correlation with the dust mask.';
        elseif((aerofrac<=.001) && (smokefrac<.001) && (dustfrac<.001))
            parastr11='The aerosol and smoke masks and dust masks are basically empty.';
        else
            parastr11='No significant mask correlation detected';
        end
        parastr12='High correlation between aerosol and smoke suggest that the aerosols are smoke particles,better correlation with aerosol and dust point in that direction as the source.';
        parastr19=strcat(parastr11,parastr12);
        p2 = Paragraph(parastr19);
        p2.Style = {OuterMargin("0pt", "0pt","0pt","10pt")};
        add(chapter,p2);
        add(rpt,chapter);
        ab=1;
    end
%         [ibreak]=strfind(GOESFileName,'_e');
%         is=1;
%         ie=ibreak(1)-1;
%         GOESShortFileName=GOESFileName(is:ie);
%         parastr1=strcat('The Data for this chart was taken from file-',GOESShortFileName,'.');
%         parastr2='Could not make a composite mask from the Aerosol/Smoke and Dusk masks because they did not match in size.';
%         parastr3=strcat('Aerosol mask size=',
%         p1 = Paragraph(parastr1,parastr2);
%         p1.Style = {OuterMargin("0pt", "0pt","0pt","10pt")};
%         add(chapter,p1);
%         add(rpt,chapter)
else
    disp('could not create composite mask-array mismatch');
end
close('all');
fprintf(fid,'%s\n','-----Exit plot routine DisplayCompositeMask-----');
fprintf(fid,'\n');
end


